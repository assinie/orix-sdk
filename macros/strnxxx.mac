;======================================================================
;			String functions
;
; Inline version
;======================================================================

.ifndef SDK_STRNXXX_MAC

    ;----------------------------------------------------------------------
    ; strncpy
    ;
    ; Usage:
    ;	strncpy src, dest, n
    ;
    ; Sortie:
    ;        A: 0 et Z=1 si copie effectuée, inchangé si non
    ;        X: 0
    ;        Y: Longueur réellement copiée
    ;----------------------------------------------------------------------

    .macro strncpy src, dest, n
	    .local @loop, @end, @eos

            ldy #$00
            ldx n
	        beq @eos            ; Nombre de caractères à copier nul

        @loop:
            lda (src),y
            sta (dest),y
            beq @end            ; beq @end
            iny
            dex
            bne @loop           ; bne @loop

        @eos:
            txa                 ; Force un nul pour le dernier caractère
            sta (dest),y

        @end:

    .endmacro


    ;----------------------------------------------------------------------
    ; strncat
    ;
    ; Usage:
    ;	strncat src, dest, n [, option]
    ;
    ;       option: si présent, ne conserve pas la valeur de dest intacte
    ;
    ; Sortie:
    ;        A: 0 et Z=1 si pas d'erreur (256ième caractère de la chaine src ou dest si erreur)
    ;        X: 0 si OK
    ;        Y: Longueur de la chaine réellement concaténée (src)
    ;
    ;        C: 0 si OK, 1 si dest fait plus de 255 caractères
    ;
    ;     dest: si option est présent => Adresse de début de la concaténation (fin de dest initial)
    ;           si option est absent => Inchangé (Cf strncat du C)
    ;
    ; ATTENTION:
    ;        Aucun test n'est effectué pour savoir si strlen(dest)+strlen(src) > 255
    ;        Peut donc produire une chaîne non utilisable par strnxxx()
    ;----------------------------------------------------------------------
    .macro strncat src, dest, n, option
	    .local @concat, @end, @loop, @eos

            clc               ; Indique aucune erreur (au cas ou strlen(src) == 0)

            ;
            ; Recalculer les sauts si strlen est modifié
            ;
            ldy #$00
            lda (src),y
            beq @end            ; Chaine source vide

    ; strcat
    ;        strlen2 src
    ;        bcs @end          ; Overflow
    ;        tya               ; X :=len(src)
    ;        tax

            strlen2 dest
            bcs @end            ; Overflow

            .if .blank({option})
                lda dest+1      ; Sauvegarde de dest
                pha             ; ATTENTION: recalculer les destinations des beq/bcs/...
                lda dest        ; si on active cette option
                pha
            .endif

            tya                 ; Calcul de l'adresse de fin de dest
            adc dest
            sta dest
            bcc @concat
            inc dest+1          ; Suppose que (dest) peut être modifié

        @concat:
	        ldx n               ; Concatenation

            ldy #$00
        @loop:
            lda (src),y
            sta (dest),y
            beq @eos
            iny
            dex
            bne @loop
            txa                 ; Force un nul pour le dernier caractère
            sta (dest),y

        @eos:
            clc                 ; Pas d'erreur

            .if .blank({option})
                pla             ; Restaure dest
                sta dest        ; ATTENTION: recalculer les destinations des beq/bcs/...
                pla             ; si on active cette option
                sta dest+1
                txa             ; <=> lda #$00
            .endif

        @end:

    .endmacro


    ;----------------------------------------------------------------------
    ; strlen2
    ;
    ; Usage:
    ;	strlen2 str
    ;
    ; Sortie:
    ;        A: 0 et Z=1 si pas d'erreur (256ième caractère de la chaine si erreur)
    ;        X: Inchangé
    ;        Y: Longueur de la chaine
    ;
    ;        C: 0 si OK, 1 si la chaine fait plus de 255 caractères
    ;----------------------------------------------------------------------
    .macro strlen2 str
	    .local @loop, @end

            clc

            ldy #$00
        @loop:
            lda (str),y
            beq @end          ; beq @end
            iny
            bne @loop         ; @loop
            sec               ; Overflow
        @end:

    .endmacro

    ;----------------------------------------------------------------------
    ;
    ;----------------------------------------------------------------------
    SDK_STRNXXX_MAC = 1

.endif
