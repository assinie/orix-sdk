.ifndef SDK_CASE_MAC

	;----------------------------------------------------------------------
	;			case / end_case
	;----------------------------------------------------------------------
	;
	; do_case var
	;	case_of 1, function1
	;	case_of 2, function2
	;	case_of {3, 9}, functions3_9
	;	case_of 10
	;		lda	#$ff
	;		jsr	subr1
	;	otherwise func_other
	; end_case
	;----------------------------------------------------------------------

	.scope _case_
		id .set 0
		item .set 0
		cp_code .set $c9
	.endscope

	;----------------------------------------------------------------------
	;
	; usage:
	;	do_case
	;	do_case var
	;	do_case A|X|Y
	;
	; Start case/endcase flow control
	;
	;----------------------------------------------------------------------
	.macro do_case var
		_case_::id .set _case_::id+1
		_case_::item .set 0
		_case_::cp_code .set $c9

		.ifnblank var
			.if .xmatch(var, A) .or .xmatch(var, a)
				; cmp
				_case_::cp_code .set $c9

			.elseif .xmatch(var, X) .or .xmatch(var, x)
				; cpx
				_case_::cp_code .set $e0

			.elseif .xmatch(var, Y) .or .xmatch(var, Y)
				; cpy
				_case_::cp_code .set $c0

			.else
				lda	var
			.endif
		.endif

	.endmacro


	;----------------------------------------------------------------------
	;
	; usage:
	;	case_of value, function
	;	case_of {min, max}, function
	;
	;
	; Call function if A|X|Y register equals value or is in range [min, max]
	; then jump after end_case statement
	;----------------------------------------------------------------------
	.macro case_of value, func
		.local @skip, @in
		.local nb_tokens

		nb_tokens .set .tcount({value})

		.if _case_::item
			jmp	.ident(.sprintf("_end_case_%d",_case_::id))

			.ident(.sprintf("_case_%d_%d",_case_::id, _case_::item)):
		.endif

		_case_::item .set _case_::item+1

		.if nb_tokens <> 3
				; cmp	#value
				.byte	_case_::cp_code, value
				bne	.ident(.sprintf("_case_%d_%d",_case_::id, _case_::item))

			.ifnblank func
				jsr	func
			.endif

		.else
				; cmp	#.left(1, {value})
				.byte	_case_::cp_code, .left(1, {value})
				; bcc	@skip	; out_inf
				bcc	.ident(.sprintf("_case_%d_%d",_case_::id, _case_::item))

				; cmp	#.right(1, {value})
				;.byte	_case_::cp_code, .right(1, {value})
				;beq	@in
				;bcs	@skip	; out_max

				; cmp	#.right(1, {value})+1
				.byte	_case_::cp_code, .right(1, {value})+1
				; bcs	@skip	; out_max
				bcs	.ident(.sprintf("_case_%d_%d",_case_::id, _case_::item))

			@in:
				;c=0 (in range)
				;z=1 + c=1 (max)
				;rts

			.ifnblank func
				jsr	func
			.endif

				jmp	.ident(.sprintf("_end_case_%d",_case_::id))

			;out_inf
			;	c=0
			;	rts
			;out_max
			;	c=1
			;	rts

		.endif

		; @skip:

	.endmacro


	;----------------------------------------------------------------------
	;
	; usage:
	;	otherwise function
	;
	;
	; Call function
	;
	;----------------------------------------------------------------------
	.macro otherwise func
		.if _case_::item
			jmp	.ident(.sprintf("_end_case_%d",_case_::id))
			.ident(.sprintf("_case_%d_%d",_case_::id, _case_::item)):

			; Pour éviter que end_case ajoute le même label
			_case_::item .set 0
		.endif

		.ifnblank func
			jsr	func
		.endif
	.endmacro


	;----------------------------------------------------------------------
	;
	; usage:
	;	end_case
	;
	; End case/endcase flow control
	;----------------------------------------------------------------------
	.macro end_case
		.if _case_::item
			.ident(.sprintf("_case_%d_%d",_case_::id, _case_::item)):
		.endif

		.ident(.sprintf("_end_case_%d",_case_::id)):
	.endmacro


	;----------------------------------------------------------------------
	;
	;----------------------------------------------------------------------
	SDK_CASE_MAC = 1
.endif
