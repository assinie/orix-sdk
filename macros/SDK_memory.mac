.ifndef SDK_MEMORY_MAC
	.include "SDK_utils.mac"

	;======================================================================
	;			Memory functions
	;======================================================================

	;----------------------------------------------------------------------
	;
	; usage:
	;	malloc size [,ptr] [,oom_msg_ptr] [,fail_value]
	;
	;	malloc AY
	;	malloc #$0100
	;	malloc (ptr)
	;	malloc value
	;
	; Note:
	;	- if parameter 'size' is 'AY', get size from AY registers
	;	  (A=LSB, Y=MSB)
	;	- if parameter 'ptr' is present, store resulting AY in ptr &ptr+1
	;	- if parameter 'oom_msg_ptr' is present, emit string pointed by
	;		'oom_msg_ptr' and return if AY is null (ie malloc error)
	;
	; Call XMALLOC function
	;
	;----------------------------------------------------------------------
	.macro malloc size, ptr, oom_msg_ptr, fail_value

		.if ( .blank({size}) )
			.error "malloc: mandatory argument 'size' missing"
		.endif

		.if ( (.not .blank({size})) .and (.not .xmatch({size}, AY)) .and (.not .xmatch({size}, ay)) )
			;SDK_imm_or_ind_or_abs size
			SDK_get_AY size
		.endif

		.byte $00, XMALLOC

		.if (.not .blank({oom_msg_ptr}))
			check_regs AY, 0, oom_msg_ptr, fail_value

		.elseif (.not .blank({fail_value}))
			check_regs AY, 0, oom_msg_ptr, fail_value
		.endif

		.if (.not .blank({ptr}))
			sta ptr
			sty ptr+1
		.endif

	.endmacro

	;----------------------------------------------------------------------
	;
	; usage:
	;	mfree (ptr)
	;
	; Call XFREE function
	;----------------------------------------------------------------------
	.macro mfree addr
		.if (.match(.left(1, {addr}), {(}) )
			; Indirect

			.if (.match(.right(1,{addr}), {)}))
				; .out"Indirect mode"

				lda .mid (1,.tcount ({addr})-2, {addr})
				ldy 1+(.mid (1,.tcount ({addr})-2, {addr}))

			.else
				.error "error: ')' missing"
			.endif

		.else
			; assume absolute
			; .out "Absolute mode"
			.error "error: indirect mode only"
		.endif

		.byte $00, XFREE
	.endmacro

	;----------------------------------------------------------------------
	;
	; usage:
	;	memdecal ptr_dst, src_start, src_end
	;
	; exit:
	;	X: unused
	;	AY: ptr_dst (A=LSB)
	;
	; note:
	;	ptr may be: (ptr), address
	;
	; Call XDECAL function
	;----------------------------------------------------------------------
	.macro memdecal ptr_dst, src_start, src_end
		SDK_get_AY src_start
		sta	DECDEB
		sty	DECDEB+1

		SDK_get_AY src_end
		sta	DECFIN
		sty	DECFIN+1

		SDK_get_AY ptr_dst
		sta	DECCIB
		sty	DECCIB+1

		.byte $00, XDECAL
	.endmacro

	;----------------------------------------------------------------------
	;
	; usage:
	;	memmove ptr_dst, src_start, src_len
	;
	; exit:
	;	X: unused
	;	AY: ptr_dst (A=LSB)
	;
	; note:
	;	ptr may be: (ptr), address
	;
	; Call XDECAL function
	;----------------------------------------------------------------------
	.macro memmove ptr_dst, ptr_src, len
		SDK_get_AY ptr_src
		sta	DECDEB
		sty	DECDEB+1

		.if .match(.left(1, {ptr_src}), {(})
			clc
			adc	len
			sta	DECFIN
			tya
			adc	len+1
			sta	DECFIN
		.else
			clc
			adc	len
			sta	DECFIN
			tya
			adc	len+1
			sta	DECFIN
		.endif

		SDK_get_AY ptr_dst
		sta	DECCIB
		sty	DECCIB+1

		.byte $00, XDECAL
	.endmacro

	SDK_MEMORY_MAC = 1
.endif
